<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document!</title>
  <style>
    body {
      margin: 0px;
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body onresize="resize();">
  <!-- <h1> <% global.thevar.push('1') %>  <%= global.thevar %> </h1> -->
  <canvas id='canvas'>

  </canvas>
  <script>
    // Set up our variables
    var robot = {};
    var robotName = "asdf";
    robot.x = Math.floor(window.innerWidth / 2) + 20;
    robot.y = Math.floor(window.innerHeight / 2) + 20;
    var boxWidth;
    var boxHeight;
    var step = 1;
    var robotSize = 20;
    var interval = 1000;
    var commands = "";
    var commandlist = [];
    var canvas = document.getElementById('canvas').getContext('2d');
    var currentKeys = {
        up:false,
        down:false,
        left:false,
        right:false
    }
    
    // Make sure everything fits when we resize the window
    function resize() {
        boxWidth = window.innerWidth;
        boxHeight = window.innerHeight;
        document.getElementById("canvas").width = window.innerWidth;
        document.getElementById("canvas").height = window.innerHeight;
    }    

    // Redraw the frame
    function draw() {
        // Clear the background
        canvas.fillStyle = "#9cc";
        canvas.fillRect(0, 0, boxWidth, boxHeight);
        
        // draw the robot
        canvas.fillStyle = "#f00";
        canvas.fillRect((robot.x - robotSize / 2) % (boxWidth + robotSize)
            - robotSize, (robot.y - robotSize / 2) % (boxHeight + robotSize)
            - robotSize, robotSize, robotSize);
    }

    // Get the new commands
    function update() {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            commands = this.responseText;
            commandlist = commandlist.concat(commands.split(""));
        };
        xhttp.open("GET", "getInput.php?name=" + robotName, true);
        xhttp.send();
    }

    // Handle keydowns
    document.addEventListener('keydown', (event) => {
        switch(event.key) {
            case "ArrowUp":
                currentKeys.up = true;
                break;
            case "ArrowDown":
                currentKeys.down = true;
                break;
            case "ArrowLeft":
                currentKeys.left = true;
                break;
            case "ArrowRight":
                currentKeys.right = true;
                break;
        }  
    }, false);

    // Handle keyups
    document.addEventListener('keyup', (event) => {
        switch(event.key) {
            case "ArrowUp":
                currentKeys.up = false;
                break;
            case "ArrowDown":
                currentKeys.down = false;
                break;
            case "ArrowLeft":
                currentKeys.left = false;
                break;
            case "ArrowRight":
                currentKeys.right = false;
                break;
        }  
    }, false);

    // Move the robot with commands from the server
    function move() {
        command = commandlist.shift();
        if (currentKeys.up)
            robot.y -= step;
        if (currentKeys.down)
            robot.y += step;
        if (currentKeys.left)
            robot.x -= step;
        if (currentKeys.right)
            robot.x += step;
        draw();
    }

    // Start the repeating functions
    setInterval(update, interval);
    setInterval(move, 17)

    // Set the initial size
    resize();

  </script>
</body>
</html>